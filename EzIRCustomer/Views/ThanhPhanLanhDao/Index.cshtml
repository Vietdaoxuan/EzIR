@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IHtmlLocalizer<SharedResource> Localizer;
@inject IHtmlLocalizer<SharedResource> SharedLocalizer
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var cResponseMessage = ViewBag.Data as CoreLib.Entities.CResponseMessage;
}
<!-- begin:: Content -->
<div class="container">
    <div class="title_line d-flex" style="margin-bottom: 0px;" id="mngID" hidden>
        <div class="container" id="doubleclick">
            <span class="title_line_item">
                <font color="#4187A6"><a href="/internal" style="color:#4187A6;font-weight: 600;">@Localizer["Update_Infomation"].Value</a></font>
            </span>
            <span class="title_line_item">
                <i class="fa  fa-caret-right"></i>
            </span>
            <span class="title_line_item">
                <font color="#4187A6" style="font-weight: 600;">@Localizer["Tong_Quan"].Value</font>
            </span>
            <span class="title_line_item">
                <i class="fa  fa-caret-right"></i>
            </span>
            <span class="title_line_item">
                <font color="#4187A6" style="font-weight: 600;">@Localizer["Management_Board"].Value</font>
            </span>
        </div>
    </div>
    <div class="k-portlet__body">
        <div class="respon-mobile">
            <div class="col-md-12 text-box-label-general" style="padding-right: 0px;padding-left: 0px;">
                <div class="col-md-12" style="padding-left: 0px;">
                    <div class="row">
                        <div class="col-md-12 text-box-label-general" style="padding-right: 0px;padding-left: 0px;">
                            <div class="content-leadership-composition">
                                <p class="text-vision" for="" style="width: 100%;padding-bottom: 15px;">@Localizer["Leadership"].Value</p>
                            </div>
                        </div>
                        <div class="row d-flex justify-content-center col-12 btn-search-wrapper" style="justify-content: center !important;">
                            <div id="" enctype="multipart/form-data" class="col-12 padt20">
                                <input type="text" class="form-control" id="MngerID" hidden>
                                <input type="text" class="form-control" id="oldCVPath" hidden>
                                <div class="form-group row required">
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Order"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        @*<input class="form-control" type="text" id="Date_of_birth">*@
                                        <input type="text" class="form-control textfield" value="" id="Order" onkeyup="isNumberSTT()" placeholder="Chỉ nhập số">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label " style="padding-left: 0px;">
                                        <label class="text-box-left note" for="">@Localizer["Name"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" id="Name" class="form-control" placeholder="@Localizer["NAME_MAXLENGTH"].Value">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left note" for="">@Localizer["Chucvu"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <div class="dropdown" data-control="checkbox-dropdown" style="z-index: 99;">
                                            <label class="dropdown-label" style="height: 32px;border: 1px solid #ccc;">Select</label>
                                            <div class="dropdown-list"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Date_of_Birth"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        @*<input class="form-control" type="text" id="Date_of_birth">*@
                                        <input type="text" class="form-control textfield" value="" id="Date_of_birth" onkeyup="isNumber()" placeholder="dd/mm/yyyy or yyyy">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Nationality"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" id="Nationality" placeholder="@Localizer["NATIONALITY_MAXLENGTH"].Value">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Knowledge"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <select id="Level_education" class="form-control" asp-items="@(new SelectList(Model.ListKnowLedgeLevel, "KNOWLEDGELEVELID","LEVELDESC"))"></select>
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Speciality"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" id="Qualification" placeholder="@Localizer["QUALITICATION_MAXLENGTH"].Value">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["SpecialityEN"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" id="Qualification_EN" placeholder="@Localizer["QUALITICATIONEN_MAXLENGTH"].Value">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Legal"].Value</label>
                                    </div>
                                    <div class="col-md-5">
                                        <input type="checkbox" onclick="checkchecked()" id="Juridical">
                                    </div>
                                </div>
                                <div class="form-group row " style="justify-content: center;">
                                    <div class="col-md-2 text-box-label" style="padding-left: 0px;">
                                        <label class="text-box-left" for="">@Localizer["Attachments"].Value</label>
                                    </div>
                                    <div class="col-md-5 input_file-EzIR">
                                        <div class="input_file">
                                            <input class="input-file" id="my-file" type="file">
                                            <label tabindex="0" for="my-file" class="input-file-trigger">@Localizer["Choose_from_computer"].Value</label>
                                        </div>
                                        <p class="file-return" style="padding-left: 5%;padding-top: 2%;color: #C9C9C9;">

                                        </p>
                                        <p id="note-information" style="padding-left: 5%; padding-top: 2%; color: #C9C9C9;">
                                            @Localizer["Formats_supported"].Value
                                            <br> @Localizer["Up_to"].Value
                                        </p>
                                    </div>
                                </div>
                                <div class="form-upfile" style="justify-content: center;">
                                    <div class="upfile-left" style="width: 15%;"></div>
                                    <div class="upfile-button" style="float: right; width:40%;">
                                        <input type="button" class="btn btn-primary form-control  mx-2 my-1" id="save" value="@Localizer["Save_send"].Value">
                                        <input type="button" class="btn btn-primary form-control  mx-2 my-1" id="update" value="@Localizer["Edit"].Value">
                                        <b id="resetAll">
                                            <input type="button" class="btn btn-primary form-control  mx-2 my-1" id="reset" value="@Localizer["Refresh"].Value">
                                        </b>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="dataTables_wrapper dt-bootstrap4 has-footer" style="box-shadow: 0px 4px 10px darkgrey; margin-bottom:25px;padding-left: 0px; padding-right: 0px;">
                        <table id="listdata" class="table table-striped dt-responsive dataTableNews has-footer dtr-inline" role="grid" style="width: 1138px;padding-left: 0px; padding-right: 0px;">
                            <thead>
                                <tr>
                                    <th style="color: #2999ce;font-weight: 500;width: 5%">@Localizer["Order"].Value</th>
                                    <th style="color: #2999ce;font-weight: 500;width: 15%">@Localizer["Name"].Value</th>
                                    <th style="color: #2999ce;font-weight: 500;width: 20%">@Localizer["Chucvu"].Value</th>
                                    <th style="color: #2999ce;font-weight: 500;width: 10%">@Localizer["Date_of_Birth"].Value</th>
                                    <th style="color: #2999ce;font-weight: 500;width: 10%">@Localizer["Nationality"].Value</th>
                                    <th style="color: #2999ce;font-weight: 500;width: 20%">@Localizer["Speciality"].Value</th>
                                    <th class="title_center" style="color: #2999ce;font-weight: 500;width: 9%;">@Localizer["Download_file"].Value</th>
                                    <th class="title_center" style="color: #2999ce;font-weight: 500;width: 12%;">@Localizer["Action"].Value</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="loading"></div>
<style>
    label {
        color: #333 !important;
    }

    .dataTables_wrapper .dataTable tbody tr, .dataTables_wrapper .dataTable thead tr {
        border-left: 0px solid #fff;
    }
    .input-file {
        position: absolute;
        top: 0;
        left: 0;
        width: 225px;
        opacity: 0;
        padding: 14px 0;
        cursor: pointer;
    }
    .input-file-trigger {
        display: block;
        padding: 12px 39px;
        background: #E5E5E5;
        color: #494949;
        font-size: 1em;
        transition: all .4s;
        cursor: pointer;
        border-radius: 5px;
    }
    .fa-download {
        padding: 10px !important;
    }
</style>
<script>
    $('#save').show();
    $('#update').hide();
    var fileInput = document.querySelector(".input-file"),
        button = document.querySelector(".input-file-trigger"),
        the_return = document.querySelector(".file-return");

    // check không cho nhập chữ vào ngày tháng
    function isNumber() {
        var inputField = document.getElementById('Date_of_birth');
        if (!inputField.value.match(/^(\d|-)+$/)) {
            inputField.value = inputField.value.replace(/[^0-9/]/g, '');
        }
    }

    // check không cho nhập chữ vào stt
    function isNumberSTT() {
        var inputField = document.getElementById('Order');
        if (!inputField.value.match(/^(\d|-)+$/)) {
            inputField.value = inputField.value.replace(/[^0-9/]/g, '');
        }
    }

    function sortPerson(data) {

        for (let i = 0; i < data.length; i++) {
            for (let j = 0; j < data.length; j++) {

                let temp = data[i].listmanagerorg;
                let temp2 = data[j].listmanagerorg;

                if (temp.split(',').length == 1 && temp2.split(',').length == 1) {
                    if (getNumberOfPosition(temp) < getNumberOfPosition(temp2)) {
                        // swap 
                        let temp3 = data[i];
                        data[i] = data[j];
                        data[j] = temp3;
                    }
                } else {

                    let min = getMin(getMultiNumberOfPosition(temp));
                    let min2 = getMin(getMultiNumberOfPosition(temp2));

                    if (min < min2) {
                        let temp3 = data[i];
                        data[i] = data[j];
                        data[j] = temp3;
                    }
                }
            }
        }

    }

    function sortByName(data) {

        for (let i = 0; i < data.length; i++) {
            for (let j = 0; j < data.length; j++) {
                if (data[i].listmanagerorg == data[j].listmanagerorg) {
                    if (data[i].mngername < data[j].mngername) {
                        let temp = data[i];
                        data[i] = data[j];
                        data[j] = temp;
                    }
                }
            }
        }
        return data;
    }

    function getNumberOfPosition(number) {
        const INDEX_OF_MANAGER_POSITION = [
            {
                "index": 1,
                "name": "Chủ tịch HĐQT",
                "value": 1
            },
            {
                "index": 2,
                "name": "Phó chủ tịch HĐQT",
                "value": 2
            },
            {
                "index": 3,
                "name": "Thành viên HĐQT",
                "value": 3
            },
            {
                "index": 4,
                "name": "Người được ủy quyền CBTT",
                "value": 18
            },
            {
                "index": 5,
                "name": "Trưởng BKS",
                "value": 7
            },
            {
                "index": 6,
                "name": "Thành viên BKS",
                "value": 8
            },
            {
                "index": 7,
                "name": "Tổng GĐ",
                "value": 9
            },
            {
                "index": 8,
                "name": "Phó TGĐ",
                "value": 10
            },
            {
                "index": 9,
                "name": "GĐ điều hành",
                "value": 11
            },
            {
                "index": 10,
                "name": "GĐ tài chính",
                "value": 12
            },
            {
                "index": 11,
                "name": "GĐ",
                "value": 13
            },
            {
                "index": 12,
                "name": "Phó GĐ",
                "value": 14
            },
            {
                "index": 13,
                "name": "Kế toán trưởng",
                "value": 15
            },
            {
                "index": 14,
                "name": "Trưởng phòng",
                "value": 16
            },
            {
                "index": 15,
                "name": "Thành viên HĐQT độc lập",
                "value": 4
            },
            {
                "index": 16,
                "name": "Chủ tịch Ủy ban kiểm toán",
                "value": 5
            },
            {
                "index": 17,
                "name": "Thành viên Ủy ban kiểm toán",
                "value": 6
            },
            {
                "index": 18,
                "name": "Người phụ trách quản trị công ty",
                "value": 17
            }
        ]
        let numberResult = null;
        INDEX_OF_MANAGER_POSITION.map((item) => {
            if (item.value == number) {
                numberResult = item.index;
            }
        })

        return numberResult;
    }

    function getMultiNumberOfPosition(str) {
        const arr = str.split(',');
        let result = [];
        arr.map((item) => {
            result.push(getNumberOfPosition(item));
        })
        return sortArray(result);
    }

    function sortArray(arr) {
        for (let i = 0; i < arr.length; i++) {
            for (let j = 0; j < arr.length; j++) {
                if (arr[i] < arr[j]) {
                    let temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr;
    }

    function getMin(arr) {
        let min = arr[0];
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return min;
    }

    var position = [];

    function addchecked(id) {
        // Kiểm tra id tồn tại trong mảng
        let exist = false;

        // Kiểm tra id input đã checked
        let inputCheck = $(`#${id}`).is(':checked');

        if (inputCheck) {
            $(`#${id}`).prop('checked', true);

            // id đã tồn lại trong mảng
            position.filter(e => {
                if (e == id) {
                    exist = true;
                }
            })

            // id chưa tồn tại add vào mảng
            if (!exist) {
                position.push(id);
            }
        } else {
            //Kiểm tra nếu id đã tồn lại trong mảng thì xóa id đó
            $(`#${id}`).prop('checked', false);
            for (var i = 0; i < position.length; i++) {

                if (position[i] === id) {

                    position.splice(i, 1);
                }

            }
        }


    }

    var juridical = 0;
    function checkchecked() {
        let inputCheck = $('#Juridical').is(':checked');
        // Check
        if (inputCheck) {
            $('#Juridical').prop('checked', true);
            juridical = 1;

        }
        else
        // Uncheck
        {
            juridical = 0;
        }
    }

        button.addEventListener("keydown", function (event) {
            if (event.keyCode == 13 || event.keyCode == 32) {
                fileInput.focus();
            }
        });
        button.addEventListener("click", function (event) {
            fileInput.focus();
            return false;
        });
        fileInput.addEventListener("change", function (event) {
            the_return.innerHTML = this.value;
            $('.file-return').show();
            $('#note-information').hide();
        });

    (function ($) {
        if (!$)
            throw new Error("JQuery is not imported");
        window.postFormData = function (url, formData) {
            return $.ajax(url,
                {
                    method: "post",
                    processData: false,
                    contentType: false,
                    data: formData
                }).done(function (res) {
                    return isMessageSuccess(res);
                }).promise();
        }

    })(window.jQuery);

    $(document).ready(function () {
        var renderColumns = [
            {
                data: "ord"
            },
            {
                data: "mngername"
            },
            {
                data:"listmanagerorgofmanager"
            },
            {
                data: "dateofbirthvn"
            },
            {
                data: "nationality"
            },
            {
                data: "knowledgespeciallevel"
            },
            {
                data: "cvpath",
                render: function (data, type, full) {
                    if (data == null) {
                        return `<div class="d-inline-flex w-100">
                              <a class='DownloadThanhphan btn text-primary' style="padding-left:0px" data-id='${data}' hidden ><i class="fas fa-download"></i></a>
                            </div >`;
                    }
                    else {
                        return `<div class="d-inline-flex w-100">
                              <a class='DownloadThanhphan btn text-primary' style="padding-left:0px" data-id='${data}' data-mngername='${full['mngername']}'><i class="fas fa-download"></i></a>
                            </div >`;
                    }

                }
            },
            {

                data: "mngid",
                render: function (data, type, full) {
                    return `<div class="d-inline-flex w-100">
                            <a class='EditThanhphan btn action-btn' data-id='${data}' data-mngerid='${full['mngerid']}'><i class="far fa-edit"></i></a>
                            </div >`;
                }
            }
        ];

        var chucvu = function () {
            this.init = function () {
                loadData(null);
                loadManagerorg(null);
            }
            var loadManagerorg = function (data) {
                 $('#loading').addClass('loading');
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetListChuvu", "ThanhPhanLanhDao")',
                    data: data,
                    success: function (data) {
                        @*console.log(data);*@
                        $("#loading").removeClass("loading");
                        var html = '';
                        for (var i = 0; i < data.length; i++) {
                            html += `<label class="dropdown-option ${data[i].amOrgID}"><input type="checkbox" onclick="addchecked(${data[i].amOrgID})" id="${data[i].amOrgID}" name="dropdowngroup" value='${data[i].amOrgID}'"> <span> ${data[i].amOrgDesc} </span></label>`;
                        }
                        $('.dropdown-list').append(html);
                        (function ($) {
                            var CheckboxDropdown = function (el) {
                                var _this = this;
                                this.isOpen = false;
                                this.areAllChecked = false;
                                this.$el = $(el);
                                this.$label = this.$el.find('.dropdown-label');
                                this.$checkAll = this.$el.find('[data-toggle="check-all"]').first();
                                this.$inputs = this.$el.find('[type="checkbox"]');

                                this.onCheckBox();

                                this.$label.on('click', function (e) {
                                    e.preventDefault();
                                    _this.toggleOpen();
                                });

                                this.$checkAll.on('click', function (e) {
                                    e.preventDefault();
                                    _this.onCheckAll();
                                });

                                this.$inputs.on('change', function (e) {
                                    _this.onCheckBox();
                                });
                            };

                            var inputCheckedList = []

                            CheckboxDropdown.prototype.onCheckBox = function () {
                                this.updateStatus();

                                inputCheckedList = $('input:checkbox:checked')

                                var strArray = ""
                                inputCheckedList.filter(e => {
                                    const id = inputCheckedList[e].id;
                                    const label = $('.' + id)[0].innerText

                                    strArray += `${label},`;
                                })

                                strArray = strArray.substring(0, strArray.length - 1);

                                if (inputCheckedList.length == 2) {
                                    this.$label.html(strArray);
                                }

                            };

                            CheckboxDropdown.prototype.onCheckBox = function () {
                                this.updateStatus();
                            };

                            var inputCheckedList = []

                            CheckboxDropdown.prototype.onCheckBox = function () {
                                this.updateStatus();

                                inputCheckedList = $('input:checkbox:checked')

                                var strArray = ""
                                inputCheckedList.filter(e => {
                                    const id = inputCheckedList[e].id;
                                    const label = $('.' + id)[0].innerText

                                    strArray += `${label},`;
                                })

                                strArray = strArray.substring(0, strArray.length - 1);

                                if (inputCheckedList.length == 2) {
                                    this.$label.html(strArray);
                                }

                            };

                            CheckboxDropdown.prototype.updateStatus = function () {
                                var checked = this.$el.find(':checked');

                                this.areAllChecked = false;
                                this.$checkAll.html('Chọn tất cả');


                                if (checked.length <= 0) {
                                    this.$label.html('@Localizer["Select"].Value');
                                }
                                else if (checked.length === 2) {
                                    this.$label.html(checked.parent('label').text());
                                   @* this.$label.html(checked.parent('label').text());*@

                                }
                                else if (checked.length === 1) {
                                    this.$label.html(checked.parent('label').text());

                                }
                                else if (checked.length === this.$inputs.length) {
                                    this.$label.html('Tất cả chức vụ đã chọn');
                                    this.areAllChecked = true;
                                    this.$checkAll.html('Bỏ chọn tất cả');
                                }
                                else {
                                    this.$label.html(checked.length + ' Đã Chọn Chức vụ');
                                }
                            };

                            CheckboxDropdown.prototype.onCheckAll = function (checkAll) {
                                if (!this.areAllChecked || checkAll) {
                                    this.areAllChecked = true;
                                    this.$checkAll.html('Uncheck All');
                                    this.$inputs.prop('checked', true);
                                }
                                else {
                                    this.areAllChecked = false;
                                    this.$checkAll.html('Chọn tất cả');
                                    this.$inputs.prop('checked', false);
                                }

                                this.updateStatus();
                            };

                            CheckboxDropdown.prototype.toggleOpen = function (forceOpen) {
                                var _this = this;

                                if (!this.isOpen || forceOpen) {
                                    this.isOpen = true;
                                    this.$el.addClass('on');
                                    $(document).on('click', function (e) {
                                        if (!$(e.target).closest('[data-control]').length) {
                                            _this.toggleOpen();
                                        }
                                    });
                                }
                                else {
                                    this.isOpen = false;
                                    this.$el.removeClass('on');
                                    $(document).off('click');
                                }
                            };

                            var checkboxesDropdowns = document.querySelectorAll('[data-control="checkbox-dropdown"]');
                            for (var i = 0, length = checkboxesDropdowns.length; i < length; i++) {
                                new CheckboxDropdown(checkboxesDropdowns[i]);
                            }
                        })(jQuery);
                    }
                });

            }
            var loadData = function (data) {
                $('#loading').addClass('loading');
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetListManager", "ThanhPhanLanhDao")',
                    data: data,
                    success: function (data) {

                        //console.log(data);
                        //sortPerson(data);
                        //sortByName(data);

                        $("#loading").removeClass("loading");
                        var table = $('#listdata').DataTable({
                            ordering: false,
                            dom: "lti<'d-flex justify-content-space-around'p>",
                            destroy: true,
                            "ordering": false,
                            searching: false,
                            lengthChange: false,
                            className: 'dt-body-right',
                            "info": false,
                            data: data,
                            columns: renderColumns,
                            "ordering": false,
                            searching: false,
                            className: 'dt-body-right',
                            "info": false,
                            pageLength: 10,
                            "lengthChange": true,
                            "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
                        });

                        //khi click sửa
                        editClick();
                        table.on('draw', editClick);

                        //khi click download
                        downloadClick();
                        table.on('draw', downloadClick);
                    }

                })

            }

            var enable = true;

            function resetForm() {
                //Reset giá trị trong form
                position = [];
                $('#Name').val('');
                $('#Name').placeholder = ('@SharedLocalizer["NAME_MAXLENGTH"]');
                $('#Order').val('');
                $('#Order').placeholder = "Chỉ nhập số";
                $('#Date_of_birth').val('');
                $('#Date_of_birth').placeholder = "dd/mm/yyyy or yyyy";
                $('#Nationality').val('');
                $('#Qualification').val('');
                $('#Qualification_EN').val('');
                $('#Juridical').prop('checked', false);
                $('.file-return').hide();
                $('#note-information').show();
                $('#update').hide();
                $('#save').show();
                $('#my-file').val('');
                
                
                var CheckboxDropdown = function (el) {
                    var _this = this;
                    this.isOpen = false;
                    this.areAllChecked = false;
                    this.$el = $(el);
                    this.$label = this.$el.find('.dropdown-label');
                    this.$checkAll = this.$el.find('[data-toggle="check-all"]').first();
                    this.$inputs = this.$el.find('[type="checkbox"]');
                    this.onCheckBox();

                    this.$label.on('click', function (e) {
                        e.preventDefault();
                        _this.toggleOpen();
                    });

                    this.$checkAll.on('click', function (e) {
                        e.preventDefault();
                        _this.onCheckAll();
                    });

                    this.$inputs.on('change', function (e) {
                        _this.onCheckBox();
                    });

                    this.$checkAll.html('Chọn tất cả');
                    this.$inputs.prop('checked', false);
                };

                var inputCheckedList = []

                CheckboxDropdown.prototype.onCheckBox = function () {
                    this.updateStatus();

                    inputCheckedList = $('input:checkbox:checked')

                    var strArray = ""
                    inputCheckedList.filter(e => {
                        const id = inputCheckedList[e].id;
                        const label = $('.' + id)[0].innerText

                        strArray += `${label},`;
                    })

                    strArray = strArray.substring(0, strArray.length - 1);

                    if (inputCheckedList.length == 2) {
                        this.$label.html(strArray);
                    }

                };


                @*CheckboxDropdown.prototype.onCheckBox = function () {
                    this.updateStatus();
                };*@

                CheckboxDropdown.prototype.updateStatus = function () {
                    var checked = this.$el.find(':checked');

                    this.areAllChecked = false;
                    this.$checkAll.html('Chọn tất cả');


                    if (checked.length <= 0) {
                        this.$label.html('@Localizer["Select"].Value');
                    }
                    else if (checked.length === 2) {
                        this.$label.html(checked.parent('label').text());
                        this.$label.html(checked.parent('label').text());

                    }
                    else if (checked.length === 1) {
                        this.$label.html(checked.parent('label').text());

                    }
                    else if (checked.length === this.$inputs.length) {
                        this.$label.html('Tất cả chức vụ đã chọn');
                        this.areAllChecked = true;
                        this.$checkAll.html('Bỏ chọn tất cả');
                    }
                    else {
                        this.$label.html(checked.length + ' Đã Chọn Chức vụ');
                    }
                };

                CheckboxDropdown.prototype.onCheckAll = function (checkAll) {
                    if (!this.areAllChecked || checkAll) {
                        this.areAllChecked = true;
                        this.$checkAll.html('Uncheck All');
                        this.$inputs.prop('checked', true);
                    }
                    else {
                        this.areAllChecked = false;
                        this.$checkAll.html('Chọn tất cả');
                        this.$inputs.prop('checked', false);
                    }

                    this.updateStatus();
                };

                CheckboxDropdown.prototype.toggleOpen = function (forceOpen) {
                    var _this = this;

                    if (!this.isOpen || forceOpen) {
                        this.isOpen = true;
                        this.$el.addClass('on');
                        $(document).on('click', function (e) {
                            if (!$(e.target).closest('[data-control]').length) {
                                _this.toggleOpen();
                            }
                        });
                    }
                    else {
                        this.isOpen = false;
                        this.$el.removeClass('on');
                        $(document).off('click');
                    }
                };

                var checkboxesDropdowns = document.querySelectorAll('[data-control="checkbox-dropdown"]');
                for (var i = 0, length = checkboxesDropdowns.length; i < length; i++) {
                    new CheckboxDropdown(checkboxesDropdowns[i]);
                }

            }
            $('#resetAll').click(function () {
                $('#reset').click(function () {
                    $('#doubleclick').click();
                });
            });
            $('#doubleclick').click(function () {
                if (enable) {
                    resetForm();
                }
            });
            $('#reset').click(function () {
                $('#doubleclick').click();
            });

            $('#reset').click(function () {
                $('#doubleclick').click();
            });

            //Thêm dữ liệu khi ấn nút thêm mới
            $('#save').click((e) => {
                $("#loading").addClass("loading");
                if ($('#Name').val() == '') {
                    $("#loading").removeClass("loading");
                    return toastr.error('@Localizer["Name_Empty"].Value');

                }
                @*else if (isNaN($('#Date_of_birth').val())) {
                    $("#loading").removeClass("loading");
                    toastr.error('@Localizer["Invalid_Date"].Value');
                    return false;
                }  *@
                else {
                e.preventDefault();

                let formData = new FormData($('form')[0]);
                var file_data = $('#my-file').prop("files")[0];
                var Name = $('#Name').val();
                var Position = position;
                var Juridical = juridical;
                var LevelEducation = $('#Level_education').val();
                var QualificationEN = $('#Qualification_EN').val();
                var Date_of_birth = $('#Date_of_birth').val();
                var Nationality = $('#Nationality').val();
                var Qualification = $('#Qualification').val();
                var Path = $('#my-file').val();
                var Order = $('#Order').val();


                        formData.append("file", file_data);
                        formData.append("MNGERNAME", Name);
                        formData.append("MORGID", Position);
                        formData.append("DATEOFBIRTHVN", Date_of_birth);
                        formData.append("KNOWLEDGELEVELID", LevelEducation);
                        formData.append("KNOWLEDGESPECIALLEVELEN", QualificationEN);
                        formData.append("ISLEGALREP", Juridical);
                        formData.append("NATIONALITY", Nationality);
                        formData.append("KNOWLEDGESPECIALLEVEL", Qualification);
                        formData.append("CVPATH", Path);
                        formData.append("ORD", Order);
                       @* formData.append("NOTE", Notes);*@


                    Check = Validate();
                    if (Check == true) {
                        if ($("#my-file")[0].files[0] != null) {
                            var file_1 = $("#my-file")[0].files[0].size;
                            if (file_1 > 30 * 1024 * 1024) {
                                $('#loading').removeClass('loading');
                                toastr.error('@SharedLocalizer["FileIsOver30MB"]');
                            }
                            else {
                                postFormData('@Url.Action("SaveManager")', formData).then(function (res) {
                                    if (res.code == "0") {
                                        $("#loading").removeClass("loading");
                                        loadData();
                                        resetForm();
                                        Swal.fire({
                                            html: '@Localizer["Approving"].Value',
                                            type: 'success',
                                            confirmButtonText: 'OK'
                                        });
                                        resetForm();
                                    }
                                    $("#loading").removeClass("loading");
                                });
                            }
                        } else {
                            postFormData('@Url.Action("SaveManager")', formData).then(function (res) {
                                    if (res.code == "0") {
                                        $("#loading").removeClass("loading");
                                        loadData();
                                        resetForm();
                                        Swal.fire({
                                            html: '@Localizer["Approving"].Value',
                                            type: 'success',
                                            confirmButtonText: 'OK'
                                        });
                                        resetForm();
                                    }
                                    $("#loading").removeClass("loading");
                               });
                        }
                        //xóa file
                    }
                }

        });


                //Sửa dữ liệu khi ấn nút sửa
                function editClick() {
                    $('.EditThanhphan').off();
                    $('.EditThanhphan').click(function () {
                        $('#loading').addClass('loading');
                        let mngID = $(this).data('id');
                        let mngeID = $(this).data('mngerid');
                        $.ajax({
                            type: "GET",
                            url: '@Url.Action("GetListManager", "ThanhPhanLanhDao")?MNGID=' + mngID + '&MNGERID=' + mngeID,
                            success: function (data) {
                                $("#loading").removeClass("loading");
                                @*console.log(data);*@
                                (function ($) {
                                    $('.file-return').show();
                                    var CheckboxDropdown = function (el) {
                                        var _this = this;
                                        this.isOpen = false;
                                        this.areAllChecked = false;
                                        this.$el = $(el);
                                        this.$label = this.$el.find('.dropdown-label');
                                        this.$checkAll = this.$el.find('[data-toggle="check-all"]').first();
                                        this.$inputs = this.$el.find('[type="checkbox"]');
                                        this.onCheckBox();

                                        this.$label.on('click', function (e) {
                                            e.preventDefault();
                                            _this.toggleOpen();
                                        });

                                        this.$checkAll.on('click', function (e) {
                                            e.preventDefault();
                                            _this.onCheckAll();
                                        });

                                        this.$inputs.on('change', function (e) {
                                            _this.onCheckBox();
                                        });

                                        this.$checkAll.html('Chọn tất cả');
                                        this.$inputs.prop('checked', false);
                                    };


                                    CheckboxDropdown.prototype.onCheckBox = function () {
                                        this.updateStatus();
                                    };

                                    @*var inputCheckedList = []

                                    CheckboxDropdown.prototype.onCheckBox = function () {
                                        this.updateStatus();

                                        inputCheckedList = $('input:checkbox:checked')

                                        var strArray = ""
                                        inputCheckedList.filter(e => {
                                            const id = inputCheckedList[e].id;
                                            const label = $('.' + id)[0].innerText

                                            strArray += `${label},`;
                                        })

                                        strArray = strArray.substring(0, strArray.length - 1);

                                        if (inputCheckedList.length == 2) {
                                            this.$label.html(strArray);
                                        }

                                    };*@

                                    CheckboxDropdown.prototype.updateStatus = function () {
                                        var checked = this.$el.find(':checked');

                                        this.areAllChecked = false;
                                        this.$checkAll.html('Chọn tất cả');


                                        if (checked.length <= 0) {
                                            this.$label.html('@Localizer["Select"].Value');
                                        }
                                        else if (checked.length === 2) {
                                            this.$label.html(checked.parent('label').text());
                                            this.$label.html(checked.parent('label').text());

                                        }
                                        else if (checked.length === 1) {
                                            this.$label.html(checked.parent('label').text());

                                        }
                                        else if (checked.length === this.$inputs.length) {
                                            this.$label.html('Tất cả chức vụ đã chọn');
                                            this.areAllChecked = true;
                                            this.$checkAll.html('Bỏ chọn tất cả');
                                        }
                                        else {
                                            this.$label.html(checked.length + ' Đã Chọn Chức vụ');
                                        }
                                    };

                                    CheckboxDropdown.prototype.onCheckAll = function (checkAll) {
                                        if (!this.areAllChecked || checkAll) {
                                            this.areAllChecked = true;
                                            this.$checkAll.html('Uncheck All');
                                            this.$inputs.prop('checked', true);
                                        }
                                        else {
                                            this.areAllChecked = false;
                                            this.$checkAll.html('Chọn tất cả');
                                            this.$inputs.prop('checked', false);
                                        }

                                        this.updateStatus();
                                    };

                                    CheckboxDropdown.prototype.toggleOpen = function (forceOpen) {
                                        var _this = this;

                                        if (!this.isOpen || forceOpen) {
                                            this.isOpen = true;
                                            this.$el.addClass('on');
                                            $(document).on('click', function (e) {
                                                if (!$(e.target).closest('[data-control]').length) {
                                                    _this.toggleOpen();
                                                }
                                            });
                                        }
                                        else {
                                            this.isOpen = false;
                                            this.$el.removeClass('on');
                                            $(document).off('click');
                                        }
                                    };

                                    var checkboxesDropdowns = document.querySelectorAll('[data-control="checkbox-dropdown"]');
                                    for (var i = 0, length = checkboxesDropdowns.length; i < length; i++) {
                                        new CheckboxDropdown(checkboxesDropdowns[i]);
                                    }
                                })(jQuery);
                                //Check phê duyệt
                                var CheckApProve = (data[0].approve)

                                if (CheckApProve == 0 || CheckApProve == null) {

                                    $('#save').hide();
                                    $('#update').show();
                                    $('#MngerID').val(data[0].mngerid);
                                    $("#mngID").val(data[0].mngid);
                                    $("#Name").val(data[0].mngername);
                                    $("#Level_education").val(data[0].knowledgelevelid);
                                    $("#Qualification_EN").val(data[0].knowledgespeciallevelen);
                                    $("#Nationality").val(data[0].nationality)
                                    $("#Date_of_birth").val(data[0].dateofbirthvn);
                                    $("#Qualification").val(data[0].knowledgespeciallevel);
                                    $("#Order").val(data[0].ord);
                                    $(".file-return").html(data[0].cvpath);

                                    //Check đường dẫn File cũ
                                    $("#oldCVPath").val(data[0].cvpath);
                                    //Check đường dẫn File
                                    var inputfile = (data[0].cvpath);

                                    if (inputfile == null) {
                                        $('#note-information').show();
                                    }
                                    else {
                                        $('#note-information').hide();
                                    }

                                    // Check Đại diện Pháp Luật
                                    var test = (data[0].islegalrep);

                                    // Check
                                    if (test == 1) {
                                        $('#Juridical').prop('checked', true);

                                    }
                                    else if (test == 0)
                                    // Uncheck
                                    {
                                        $('#Juridical').prop('checked', false);
                                    }

                                    let testlist = (data[0].listmanagerorg);
                                    testlist = testlist.split(",");

                                    position = [];
                                    for (let id in testlist) {
                                        item = parseInt(testlist[id])
                                        $(`#${item}`).prop('checked', true);
                                        addchecked(item);
                                        (function ($) {

                                            var CheckboxDropdown = function (el) {
                                                var _this = this;
                                                this.isOpen = false;
                                                this.areAllChecked = false;
                                                this.$el = $(el);
                                                this.$label = this.$el.find('.dropdown-label');
                                                this.$checkAll = this.$el.find('[data-toggle="check-all"]').first();
                                                this.$inputs = this.$el.find('[type="checkbox"]');
                                                this.onCheckBox();

                                                this.$label.on('click', function (e) {
                                                    e.preventDefault();
                                                    _this.toggleOpen();
                                                });

                                                this.$checkAll.on('click', function (e) {
                                                    e.preventDefault();
                                                    _this.onCheckAll();
                                                });

                                                this.$inputs.on('change', function (e) {
                                                    _this.onCheckBox();
                                                });
                                            };

                                            var inputCheckedList = []

                                            CheckboxDropdown.prototype.onCheckBox = function () {
                                                this.updateStatus();

                                                inputCheckedList = this.$el.find(':checked')

                                                var strArray = ""
                                                inputCheckedList.filter(e => {
                                                    const id = inputCheckedList[e].id;
                                                    const label = $('.' + id)[0].innerText

                                                    strArray += `${label},`;
                                                })

                                                strArray = strArray.substring(0, strArray.length - 1);
                                                if (inputCheckedList.length == 2) {
                                                    this.$label.html(strArray);
                                                }
                                            };

                                           @* CheckboxDropdown.prototype.onCheckBox = function () {
                                                this.updateStatus();
                                            };*@

                                            CheckboxDropdown.prototype.updateStatus = function () {
                                                var checked = this.$el.find(':checked');

                                                this.areAllChecked = false;
                                                this.$checkAll.html('Chọn tất cả');


                                                if (checked.length <= 0) {
                                                    this.$label.html('@Localizer["Select"].Value');
                                                }
                                                else if (checked.length === 2) {
                                                    this.$label.html(checked.parent('label').text());

                                                }
                                                else if (checked.length === 1) {
                                                    this.$label.html(checked.parent('label').text());

                                                }
                                                else if (checked.length === this.$inputs.length) {
                                                    this.$label.html('Tất cả chức vụ đã chọn');
                                                    this.areAllChecked = true;
                                                    this.$checkAll.html('Bỏ chọn tất cả');
                                                }
                                                else {
                                                    this.$label.html(checked.length + ' Đã Chọn Chức vụ');
                                                }
                                            };

                                            CheckboxDropdown.prototype.onCheckAll = function (checkAll) {
                                                if (!this.areAllChecked || checkAll) {
                                                    this.areAllChecked = true;
                                                    this.$checkAll.html('Uncheck All');
                                                    this.$inputs.prop('checked', true);
                                                }
                                                else {
                                                    this.areAllChecked = false;
                                                    this.$checkAll.html('Chọn tất cả');
                                                    this.$inputs.prop('checked', false);
                                                }

                                                this.updateStatus();
                                            };

                                            CheckboxDropdown.prototype.toggleOpen = function (forceOpen) {
                                                var _this = this;

                                                if (!this.isOpen || forceOpen) {
                                                    this.isOpen = true;
                                                    this.$el.addClass('on');
                                                    $(document).on('click', function (e) {
                                                        if (!$(e.target).closest('[data-control]').length) {
                                                            _this.toggleOpen();
                                                        }
                                                    });
                                                }
                                                else {
                                                    this.isOpen = false;
                                                    this.$el.removeClass('on');
                                                    $(document).off('click');
                                                }
                                            };

                                            var checkboxesDropdowns = document.querySelectorAll('[data-control="checkbox-dropdown"]');
                                            for (var i = 0, length = checkboxesDropdowns.length; i < length; i++) {
                                                new CheckboxDropdown(checkboxesDropdowns[i]);
                                            }
                                        })(jQuery);
                                    }
                                }
                                else if (CheckApProve == 1 || CheckApProve == 2) {
                                    $('#save').show();
                                    $('#update').hide();
                                    resetForm();
                                    return toastr.error('Thông tin chưa được phê duyêt, không thể sửa!');

                                }
                            }
                        });
                    })

                }

            $('#update').click(function (e) {
                $('#loading').addClass('loading');
                e.preventDefault();

                let formData = new FormData($('form')[0]);
                var file_data = $('#my-file').prop("files")[0];
                var MngID = $("#mngID").val();
                var MngerID = $("#MngerID").val();
                var Name = $('#Name').val();
                var Position = position;
                var Juridical = juridical;
                var LevelEducation = $('#Level_education').val();
                var QualificationEN = $('#Qualification_EN').val();
                var Date_of_birth = $('#Date_of_birth').val();
                var Nationality = $('#Nationality').val();
                var Qualification = $('#Qualification').val();
                var Path = $('#my-file').val();
                var Order = $('#Order').val();
                if (Path.length == 0) {
                    Path = $('#oldCVPath').val();
                }

                if (!Name.trim()) {
                    $("#loading").removeClass("loading");
                    return toastr.error('@Localizer["Name_Empty"].Value');
                }

                var file_data = $('#my-file').prop("files")[0];
                @*console.log(file_data);*@
                formData.append("file", file_data);
                formData.append("MNGERID", MngerID);
                formData.append("MNGID", MngID);
                formData.append("MNGERNAME", Name);
                formData.append("MORGID", Position);
                formData.append("DATEOFBIRTHVN", Date_of_birth);
                formData.append("KNOWLEDGELEVELID", LevelEducation);
                formData.append("KNOWLEDGESPECIALLEVELEN", QualificationEN);
                formData.append("ISLEGALREP", Juridical);
                formData.append("NATIONALITY", Nationality);
                formData.append("KNOWLEDGESPECIALLEVEL", Qualification);
                formData.append("CVPATH", Path);
                formData.append("ORD", Order);
                Check = Validate();
                if (Check == true) {
                    if (file_data != null) {
                        var file_1 = $("#my-file")[0].files[0].size;
                        if (file_1 > 30 * 1024 * 1024) {
                            $('#loading').removeClass('loading');
                            toastr.error('@SharedLocalizer["FileIsOver30MB"]');
                        } else {
                            postFormData('@Url.Action("UpdateManager")', formData).then(function (res) {
                                $("#loading").removeClass("loading");
                                if (res.code == "0") {
                                    $("#loading").removeClass("loading");
                                    loadData();
                                    resetForm();
                                    Swal.fire({
                                        html: "@Localizer["Approving"].Value",
                                        type: 'success',
                                        confirmButtonText: 'OK'
                                    });
                                    resetForm()
                                }
                            });
                        }
                    } else {
                        postFormData('@Url.Action("UpdateManager")', formData).then(function (res) {
                            $("#loading").removeClass("loading");
                            if (res.code == "0") {
                                $("#loading").removeClass("loading");
                                loadData();
                                resetForm();
                                Swal.fire({
                                    html: "@Localizer["Approving"].Value",
                                    type: 'success',
                                    confirmButtonText: 'OK'
                                });
                                resetForm()
                            }
                        });
                    }
                }
            });

            function Validate() {
                if ($('#Name').val().length > 500) {
                    toastr.error('@SharedLocalizer["NAME_MAXLENGTH"]');
                    $('#loading').removeClass('loading');
                    return false;
                }
                else if ($('#Nationality').val().length > 200) {
                    toastr.error('@SharedLocalizer["NATIONALITY_MAXLENGTH"]');
                    $('#loading').removeClass('loading');
                    return false;
                }
                else if ($('#Qualification').val().length > 500) {
                    toastr.error('@SharedLocalizer["QUALITICATION_MAXLENGTH"]');
                    $('#loading').removeClass('loading');
                    return false;
                }
                else if ($('#Qualification_EN').val().length > 500) {
                    toastr.error('@SharedLocalizer["QUALITICATIONEN_MAXLENGTH"]');
                    $('#loading').removeClass('loading');
                    return false;
                }
                else {
                    return true;
                }
            }

            function downloadClick() {
                    $('.DownloadThanhphan').off();
                    $('.DownloadThanhphan').click(function () {
                        $('#loading').addClass('loading');
                        let cvpath = $(this).data('id');
                        let mngername = $(this).data('mngername');
                        var file_extension = '';
                        file_extension = cvpath.split('.').pop();
                        file_extension = file_extension.replace(/\s+/g, '');
                        var filedown = '';
                        if (file_extension.replace == 'doc') {
                            filedown = `TPLD_${mngername}.doc`;
                        }
                        else if (file_extension == 'docx') {
                            filedown = `TPLD_${mngername}.docx`;
                        }
                        else if (file_extension == 'pdf') {
                            filedown = `TPLD_${mngername}.pdf`;
                        }
                        else if (file_extension == 'rar') {
                            filedown = `TPLD_${mngername}.rar`;
                        }
                        else {
                            filedown = '';
                        }
                        @*console.log(filedown);*@
                        return Promise.resolve(
                            $.postNative('@Url.Action("DownloadFile", "ThanhPhanLanhDao")', {
                                CVPATH: cvpath,
                            })

                                .done((response, statusCode, xhr) => {
                                    @*console.log(response);*@
                                    if (response.code) {
                                        @*console.log(response);*@
                                        return displayResponse(response);
                                    }
                                    const type = xhr.getResponseHeader('Content-Type');
                                    const blob = new Blob([response], { type: type });

                                    //check nếu là response message , không phải file thì hiển thị lỗi
                                    if (type.includes("application/json")) {
                                        //phải đọc file vì respone ở dạng arraybuffer
                                        const fileReader = new FileReader();
                                        fileReader.onload = function () {
                                            $('#loading').removeClass('loading');
                                            toastr.error("@Localizer["FileIsNotExist"].Value")
                                            displayResponse(JSON.parse(this.result));
                                        };
                                        fileReader.readAsText(blob);
                                        return;
                                    }


                                    saveAs(blob, filedown);
                                    $('#loading').removeClass('loading');
                                    swal.close();
                                }).fail((response) => {
                                    @*console.log(response);*@
                                })

                        );

                })
            }
            }
        var chucvus = new chucvu();
        chucvus.init();
    });
</script>