@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.AspNetCore.Http;
@using CoreLib.Configs;

@inject IHtmlLocalizer<SharedResource> Localizer;
@inject IHttpContextAccessor _httpContextAccessor;

@{
    ViewData["Title"] = "Trình độ công nghệ";
    Layout = "~/Views/Shared/_Layout.cshtml";
    //var cResponseMessage = ViewBag.Data as CoreLib.Entities.CResponseMessage;

    var cpnyID = _httpContextAccessor.HttpContext.Session.GetInt32(SessionTypes.CPNY_ID) ?? null;
}

<link type="text/css" href="~/lib/ckeditor/contents.css" rel="stylesheet" />

<div class="title_line d-flex" style="margin-bottom: 0px;">
    <div class="container">
        <span class="title_line_item">
            <font color="#4187A6"><a href="/internal" style="color:#4187A6;font-weight: 600;">@Localizer["Update_Infomation"].Value</a></font>
        </span>
        <span class="title_line_item">
            <i class="fa  fa-caret-right"></i>
        </span>
        <span class="title_line_item">
            <font color="#4187A6" style="font-weight: 600;">@Localizer["Business"].Value</font>
        </span>
        <span class="title_line_item">
            <i class="fa  fa-caret-right"></i>
        </span>
        <span class="title_line_item">
            <font color="#4187A6" style="font-weight: 600;">@Localizer["Technological_Level"].Value</font>
        </span>
    </div>
</div>
<div class="k-portlet__body">
    <div class="row col-12 nopadding" style="margin-bottom: 10px;">
        <div class="col-md-7 div-button-mobiletop" style="padding-bottom: 10px"></div>
        <div class="col-md-5 div-button" style="padding-bottom: 10px;padding-right: 0%;">
            <div class="set_up-button" style="padding-left: 70%;">
                <input type="button" class="btn btn-primary form-control  mx-2 my-1" id="btnSave" value="@Localizer["Save_send"].Value">
            </div>
        </div>
        <div class="respon-mobile">
            <div class="col-md-12 text-box-label-general" style="padding-right: 0px !important;padding-left: 0px !important;">
                <div class="col-md-12" style="padding-left: 0px;">
                    <div class="row">
                        <div class="col-md-12 text-box-label-general " style="padding-right: 0px !important;padding-left: 0px !important;">
                            <p class="text-product-sales" for="" style="width: 100%;padding-bottom: 15px;">@Localizer["Technological_Level"].Value</p>
                            <div class="row d-flex justify-content-center">
                                <input type="number" id="txtMenuID_TDCN" value="187" readonly hidden />
                                <input type="number" id="txtID_TDCN" readonly hidden />
                                <input type="number" id="txtApprove_TDCN" readonly hidden />
                                <input type="number" id="keyPress_TDCN" readonly hidden />
                                <textarea class="d-none" cols="100" id="editorTDCN" rows="10"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    body {
        margin: 0px;
    }
</style>
@section Scripts
{
    @*@await Html.PartialAsync(@"_FormMessage", cResponseMessage)*@

    <script type="text/javascript" src="~/lib/ckeditor/ckeditor.js"></script>
    <script type="text/javascript" src="~/lib/ckeditor/config.js"></script>
    <script type="text/javascript" src="~/lib/ckeditor/build-config.js"></script>
    <script type="text/javascript" src="~/lib/ckeditor/styles.js"></script>


    <script type="text/javascript">

        $(document).ready(function () {

            // Configs constant
            const TDCN_CONFIGS = {
                MENUID_TDCN: 187,
                IS_KEY_PRESS: 1,
            }

            // Cấu hình CKEditor
            function CreateEditor() {

                CKEDITOR.replace('editorTDCN',
                    {
                        extraPlugins: 'image2 , uploadimage',

                        toolbar: toolbar = [
                            {
                                name: 'document',
                                items: ['Source', '-', 'NewPage', 'Preview', 'Print', '-', 'Templates']
                            },
                            {
                                name: 'clipboard',
                                items: [
                                    'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'
                                ]
                            },
                            { name: 'editing', items: ['Find', 'Replace', '-', 'SelectAll', '-', 'Scayt'] },
                            {
                                name: 'forms',
                                items: [
                                    'Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button',
                                    'HiddenField'
                                ]
                            },
                            '/',
                            {
                                name: 'basicstyles',
                                items: [
                                    'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-',
                                    'CopyFormatting', 'RemoveFormat'
                                ]
                            },
                            {
                                name: 'paragraph',
                                items: [
                                    'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote',
                                    'CreateDiv', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight',
                                    'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language'
                                ]
                            },
                            { name: 'links', items: ['Link', 'Unlink', 'Anchor'] },
                            {
                                name: 'insert',
                                items: [
                                    'Image', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak',
                                    'Iframe', 'texzilla'
                                ]
                            },
                            '/',
                            { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                            { name: 'colors', items: ['TextColor', 'BGColor'] },
                            { name: 'tools', items: ['Maximize', 'ShowBlocks'] },
                            { name: 'about', items: ['About'] }
                        ],

                        // Configure your file manager integration. This example uses CKFinder 3 for PHP.
                        filebrowserUploadUrl: '@Url.Action("UploadImage")',
                        filebrowserImageUploadUrl: '@Url.Action("UploadImage")',
                        filebrowserBrowseUrl: '@Url.Action("UploadImage")',
                        filebrowserImageBrowseUrl: '@Url.Action("UploadImage")',


                        // Upload dropped or pasted images to the CKFinder connector (note that the response type is set to JSON).
                        uploadUrl: '@Url.Action("UploadImage")',

                        // Reduce the list of block elements listed in the Format drop-down to the most commonly used.
                        format_tags: 'p;h1;h2;h3;pre',
                        // Simplify the Image and Link dialog windows. The "Advanced" tab is not needed in most cases.
                        removeDialogTabs: 'image:advanced;link:advanced',

                        height: 200,
                        width: '100%'
                    }
                );

            }

            // Object TDCN
            var TDCN = function () {

                this.init = function () {
                    CreateEditor();
                    setTimeout(function () {
                        registerEvents();
                        loadData();
                    }, 50);
                }

                var loadData = async function () {
                    $('#loading').addClass('loading');
                    destroyCKEDITOR();

                    setTimeout(function () {
                        $.ajax({
                        url: '@Url.Action("GetTdcn", "Trinhdocongnghe")',
                        method: 'GET',
                        dataType: 'json',
                        data: {  }
                        })
                        .done((data) => {

                            //console.log(data);
                            $('#loading').removeClass('loading');
                            if (data.code == 0) {

                                if (Array.isArray(data.data) && data.data.length > 0) {
                                    /*$('#btnSave').attr('disabled', 'disabled');*/
                                    let arrObj = data.data;

                                    for (const value of arrObj) {

                                        if (value.menuID == TDCN_CONFIGS.MENUID_TDCN) {
                                            $('#txtMenuID_TDCN').val(value.menuID);
                                            $('#txtID_TDCN').val(value.id);
                                            $('#txtApprove_TDCN').val(value.approve);

                                            if (!CKEDITOR.instances.editorTDCN) CreateEditor();

                                            CKEDITOR.instances.editorTDCN.setData(value.content);

                                            if (value.approve == 1 || value.approve == 2) CKEDITOR.instances.editorTDCN.setReadOnly(true);
                                        }
                                    }
                                }
                            }
                        })
                            .fail((err) => {
                                //console.log(err);
                            });
                    }, 500);
                }

                var registerEvents = function () {

                    // Save TDCN
                    $('body').on('click', '#btnSave', function () {

                        // status key press
                        let keyPress_TDCN = $('#keyPress_TDCN').val();
                        /*$('#btnSave').attr('disabled', 'disabled');*/
                        let infoSheetViewModels = [];

                        if (keyPress_TDCN == TDCN_CONFIGS.IS_KEY_PRESS) {
                            let dataEditorTdcn = CKEDITOR.instances.editorTDCN.getData();
                            let idTdcn = $('#txtID_TDCN').val();
                            let menuIdTdcn = $('#txtMenuID_TDCN').val();
                            //let approveTdcn = $('#txtApprove_TDCN').val();
                            infoSheetViewModels.push({ /*Approve: approveTdcn,*/ ID: idTdcn, MenuID: menuIdTdcn, Content: dataEditorTdcn, CpnyID: @cpnyID });
                            CKEDITOR.instances.editorTDCN.setReadOnly(true);
                            $('#keyPress_TDCN').val(0);
                        }


                        //console.log(infoSheetViewModels);

                        if (infoSheetViewModels.length == 0) return toastr.error('@Localizer["DataHasNotBeenChanged"].Value');

                        $.ajax({
                            url: '@Url.Action("SaveTdcn", "Trinhdocongnghe")',
                            method: 'POST',
                            dataType: 'json',
                            data: { infoSheetViewModels }
                        })
                        .done((data) => {
                            ////console.log(data);
                            $('#loading').removeClass('loading');
                            if (data.code == 0) {
                                loadData();
                                Swal.fire({
                                    html: "@Localizer["Approving"].Value",
                                    type: 'success',
                                    confirmButtonText: 'OK'
                                });
                                //toastr.success(data.message);
                                return;
                            } else {
                                return toastr.error(data.message);
                            }
                        })
                            .fail((err) => { //console.log(err);
                            });
                    });

                    CKEDITOR.instances.editorTDCN.on('key', function () {
                        let isApprove = $('#txtApprove_TDCN').val();
                        if (isApprove == 1 || isApprove == 2) return;
                        //console.log(isApprove);
                        $('#keyPress_TDCN').val(1);
                    });
                    fileUploadResponse();
                }

                function destroyCKEDITOR() {
                    CKEDITOR.instances.editorTDCN.setData('');

                    //CKEDITOR.instances.editorTDCN.destroy();
                }

                function fileUploadResponse() {
                    CKEDITOR.instances.editorTDCN.on('fileUploadResponse', function () {
                        let isApprove = $('#txtApprove_TDCN').val();
                        if (isApprove == 1 || isApprove == 2) return;

                        $('#keyPress_TDCN').val(1);
                    });
                }

            }

            // Instance of TDCN
            var tdcn = new TDCN();
            tdcn.init();
        });

        // Get giá trị cho CKEDITOR
        // CKEDITOR.instances.editorTDCN.getData();

        // Set giá trị cho CKEDITOR
        // CKEDITOR.instances.editorTDCN.setData("object");

        // Hủy bỏ instance của CKEDITOR hiện tại
        // CKEDITOR.instances.editorTDCN.destroy();
    </script>
}
